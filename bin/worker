#!/usr/bin/env coffee

path = require "path"
parse = require "path-parse"
yargs = require "yargs"
Promise = require "bluebird"
Worker = require "../lib/Actor/Worker"
settingsLoader = require "../core/helper/settings"
createDependencies = require "../core/helper/dependencies"

Promise.longStackTraces() # slows down execution but simplifies debugging

argv = yargs
  .usage('Usage: $0 [options] activityTaskPath')
  .options(
    "s":
      alias: "settings"
      type: "string"
      description: "Settings for dependencies (SWF binding, logger, etc)"
      demand: true
    "d":
      alias: "domain"
      type: "string"
      description: "Amazon SWF domain"
      demand: true
    "t":
      alias: "task-list-name"
      type: "string"
      description: "Amazon SWF taskList name (guessed from activityTaskPath by default)"
      demand: false
      default: null
    "i":
      alias: "identity"
      type: "string"
      description: "Amazon SWF identity (defaults to \"worker://{{hostname}}/{{task-list-name}}\#{{pid}}\")"
      demand: false
    "m":
      alias: "max-loops"
      type: "number"
      description: "Execute that many loops and exit (useful for testing)"
      demand: false
      default: 0
    "u":
      alias: "timeout"
      type: "number"
      description: "Override SWF socket timeout (useful for testing) (in milliseconds)"
      demand: false
      default: 0
  )
  .demand(1)
  .strict()
  .argv

settings = settingsLoader path.resolve(process.cwd(), argv.settings)
taskPath = argv._[0]
taskListName = argv.taskListName or parse(taskPath).name
taskCls = require path.resolve(process.cwd(), taskPath)
identity = argv.identity or "worker://#{require("os").hostname()}/#{taskListName}\##{process.pid}"

if argv.timeout
  settings.swf.httpOptions ?= {}
  settings.swf.httpOptions.timeout = argv.timeout

dependencies = createDependencies(settings, "bin_worker")

worker = new Worker
  domain: argv.domain
  taskList:
    name: taskListName
  identity: identity
  taskCls: taskCls
  maxLoops: argv.maxLoops
,
  dependencies

worker.start("vodka") # hope it helps

# In nomine SIGINT, SIGTERM, SIGQUIT, amen
onDeath = require "death"
onDeath (signal) -> worker.trap(signal)
