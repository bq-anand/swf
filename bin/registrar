#!/usr/bin/env coffee

path = require "path"
parse = require "path-parse"
yargs = require "yargs"
domain = require "domain"
Registrar = require "../lib/Actor/Registrar"
loadSettings = require "../core/helper/settings"
createDependencies = require "../core/helper/dependencies"

commandDefaults = (yargs) ->
  yargs
  .usage('Usage: $0 [options] [command] definitionsPath1 ... definitionsPathN')
  .options(
    "s":
      alias: "settings"
      type: "string"
      description: "Dependency settings (SWF binding, logger, etc)"
      demand: true
  )
  .demand(2)
  .strict()

argv = yargs
  .usage('Usage: $0 [options] [command] [command-specific arguments]')
  .command("domains", "Register domains", commandDefaults)
  .command("workflowTypes", "Register workflowTypes", (yargs) ->
    commandDefaults(yargs)
    .options(
      "d":
        alias: "domain"
        type: "string"
        description: "Where to register the types"
        demand: true
    )
  )
  .command("activityTypes", "Register activityTypes", (yargs) ->
    commandDefaults(yargs)
    .options(
      "d":
        alias: "domain"
        type: "string"
        description: "Where to register the types"
        demand: true
    )
  )
  .demand(1, "Please provide a command")
  .strict()
  .argv

command = argv._[0]
definitions = []
for definitionPath in argv._[1..]
  definitions = definitions.concat(require path.resolve(process.cwd(), definitionPath))
settings = loadSettings path.resolve(process.cwd(), argv.settings)
domain = argv.domain

dependencies = createDependencies(settings, "bin_registrar")

registrar = new Registrar {}, dependencies

switch command
  when "domains"
    registrar.registerDomains(definitions)
  when "workflowTypes"
    registrar.registerWorkflowTypesForDomain(definitions, domain)
  when "activityTypes"
    registrar.registerActivityTypesForDomain(definitions, domain)
  else
    throw new Error("Unknown command: \"#{command}\"")

(require "death")(-> process.exit(0)) # In nomine SIGINT, SIGTERM, SIGQUIT, amen
